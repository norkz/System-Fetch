// External Dependencies
var _ = require('underscore');
var Class = require('jc');
var fs = require('fs');
var wrench = require('wrench');
var path = require('path');
var jade = require('jade');
var jsb = require('jsb');
var less = require('less');
// Shortcuts
var exists = fs.existsSync;
var root = __dirname + '/..';

module.exports = Class({

	init: function (dir) {
		var self = this;
		
		self.dir = dir;
		self.name = path.basename(dir, path.extname(dir));
		self.title = self.name.slice(0, 1).toUpperCase() + self.name.slice(1);
		self.staticDir = root + '/static/' + self.name;
		self.iconImage = '';
		self.init = null;
		self.slots = {};
		self.templates = {
			index: function (context) { return ''; }
		};
		self.client = '';
		self.css = '';
		
		self.load();
	},

	load: function () {
		var self = this;
		self.collectStatic();
		self.loadIcon();
		self.loadServer();
		self.loadTemplates();
		self.loadJavaScript();
		self.loadCSS();
	},

	collectStatic: function () {
		var self = this;
		if (!exists(self.dir + '/static')) { return; }
		wrench.copyDirSyncRecursive(self.dir + '/static', self.staticDir, {
			forceDelete: true
		});
	},

	loadIcon: function () {
		var self = this;
		if (exists(self.staticDir + '/icon.png')) {
			self.iconImage = '/' + self.name + '/icon.png';
		} else {
			self.iconImage = '/node-os/images/app_icon.png';
		}
	},

	loadServer: function () {
		var self = this;
		if (!exists(self.dir + '/index.js')) {
			self.init = function (request, callback) {
				callback();
			};
			return;
		}
		var mod = require(self.dir + '/index.js');
		_.each(mod, function (handler, name) {
			if (typeof handler !== 'function') { return; }
			if (name === 'init') {
				self.init = handler;
				return;
			}
			self.slots[name] = handler;
		});
		self.title = mod.title || self.title;
	},

	loadTemplates: function () {
		var self = this;
		if (!exists(self.dir + '/templates')) {
			return;
		}
		_.each(fs.readdirSync(self.dir + '/templates'), function (name) {
			var filename = self.dir + '/templates/' + name,
				name = path.basename(name, path.extname(name)),
				source = fs.readFileSync(filename) + '';
			self.templates[name] = jade.compile(source, {
				filename: filename
			});
		});
	},

	loadJavaScript: function () {
		var self = this;
		if (!exists(self.dir + '/client/index.js')) {
			return;
		}
		self.client = jsb.buildFile({
			input: self.dir + '/client/index.js',
			min: true,
			root: self.dir + '/client'
		});
		if (Object.keys(self.slots).length > 0) {
			var slots = 'var slots = {';
			_.each(self.slots, function (handler, name) {
				slots += '\n' + name + ': function (request, callback) { os.slot(\'' + self.name + '.' + name + '\', request, callback); },';
			});
			slots += '};';
		} else {
			slots = 'var slots = {};';
		}
		block = 'var elem = $(".___id___-app-block")[0]; var b = $(".___id___-app-block").find.bind($(".' + self.name + '-app-block"));'
		self.client = '(function () { ' + slots + block + self.client + ' }());';
	},

	loadCSS: function () {
		var self = this,
			css = '';
		if (exists(self.dir + '/styles.css')) {
			css = fs.readFileSync(self.dir + '/styles.css') + '';
		}
		if (exists(self.dir + '/styles.less')) {
			css += fs.readFileSync(self.dir + '/styles.less') + '';
		}
		css = '.___id___-app-block {' + css + '}';
		less.render(css, function (e, content) {
			self.css = content;
		});
	},
	
	makeInit: function (request, callback) {
		var self = this,
			init = self.init || function (request, callback) {
				callback();
			},
			template = self.templates.index,
			result = {};
		loadHTML();
		
		function loadHTML() {
			init(request, function (response) {
				var content;
				if (typeof response === 'string') {
					callback(response);
					return;
				}
				response = response || {};
				content = template(response);
				content = '<div class="___id___-app-block">' + content + '</div>';
				result.html = content;
				loadCSS();
			});
		}
		
		function loadCSS() {
			result.css = self.css;
			result.html += '<script>' + self.client + '</script>';
			callback(result);
		}
	},

});