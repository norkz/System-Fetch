var _ = require('underscore');
var Class = require('jc');
var http = require('http');
var connect = require('connect');
var socketio = require('socket.io');
var fs = require('fs');
var sha1 = require('sha1');

var Application = require('./application');

var root = __dirname + '/..';

var baseHTMLRoot = root + '/static/node-os/html/';
var baseHTML = fs.readFileSync(baseHTMLRoot + 'base.html') + '';
var error404HTML = fs.readFileSync(baseHTMLRoot + 'error404.html') + '';
var appHTML = fs.readFileSync(baseHTMLRoot + 'app.html') + '';
var loginHTML = fs.readFileSync(baseHTMLRoot + 'login.html') + '';
var keyFilename = root + '/client.key';

module.exports = Class({

	init: function (settings) {
		var self = this;
		self.settings = settings;
		self.apps = {};
	},

	createServer: function () {
		var self = this,
			connectServer = connect(),
			httpServer = http.createServer(connectServer),
			ioServer = socketio.listen(httpServer);
		ioServer.set('log level', 0);
		self.connectServer = connectServer;
		self.httpServer = httpServer;
		self.ioServer = ioServer;
	},

	setConnectMiddleware: function () {
		var self = this,
			staticDir = self.settings.staticDir || root + '/static',
			connectServer = self.connectServer;
		connectServer.use(connect.static(staticDir));
		connectServer.use(self.handleHttpRequest.bind(self));
	},

	handleHttpRequest: function (request, response) {
		var self = this;
		if (request.url.split('?')[0] !== '/') {
			response.writeHead(404, { 'Content-Type': 'text/html' });
			response.end(error404HTML);
		}
		response.writeHead(200, { 'Content-Type': 'text/html' });
		response.end(baseHTML);
	},

	validateRequest: function (request) {
		var self = this,
			key = fs.readFileSync(keyFilename) + '';
		return key === request.__key__;
	},

	setSlots: function () {
		var self = this;
		self.ioServer.of('/node-os/').on('connection', function (socket) {
			socket.on('slot', function (name, request, callback) {
				if (!self.validateRequest(request)) { return; }
				var appName = name.split('.')[0],
					slotName = name.split('.')[1],
					app = self.apps[appName];
				if (!app) {
					console.log('Application "' + appName + '" not found!');
					return;
				}
				var slot = app.slots[slotName];
				if (!slot) {
					console.log('Slot "' + name + '" not found!');
					return;
				}
				slot(request, callback);
			});
			socket.on('login', function (request, callback) {
				var username = request.username,
					password = request.password,
					key;
				if (self.settings.username === username && self.settings.password === password) {
					key = sha1(username + password + (new Date()).getTime());
					fs.writeFileSync(keyFilename, key);
					callback(key);
				} else {
					callback(false);
				}
			});
			socket.on('content', function (request, callback) {
				if (self.validateRequest(request)) {
					callback(appHTML);
				} else {
					callback(loginHTML);
				}
			});
			socket.on('icons', function (callback) {
				callback(self.getIcons());
			});
			socket.on('app', function (appName, request, callback) {
				var app = self.apps[appName];
				if (!app) {
					console.log('Application "' + appName + '" not found!');
					return;
				}
				app.makeInit(request, function (response) {
					response.name = app.name;
					response.title = app.title;
					response.icon = app.iconImage;
					var id = response.name + ((new Date()).getTime() + (Math.round(Math.random() * 100000)));
					response.html = response.html.replace(/___id___/mg, id);
					response.css = response.css.replace(/___id___/mg, id);
					callback(response);
				});
			});
		});
	},
	
	loadApps: function () {
		var self = this;
		_.each(fs.readdirSync(root + '/apps'), function (appName) {
			self.apps[appName] = new Application(root + '/apps/' + appName);
		});
	},
	
	getIcons: function () {
		var self = this,
			icons = [];
		_.each(self.apps, function (app) {
			icons.push({
				name: app.name,
				title: app.title,
				image: app.iconImage
			});
		});
		return icons;
	},

	start: function () {
		var self = this,
			port = self.settings.port || 8013;
		self.loadApps();
		self.createServer();
		self.setConnectMiddleware();
		self.setSlots();
		self.httpServer.listen(port);
		console.log('Node-OS started at ' + port + '...');
	},

});