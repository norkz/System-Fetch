function ViewModel() {
	var self = this;
	
	self.files = ko.observableArray();
	self.currentDir = ko.observable();
	
	self.back = function () {
		var dir = self.currentDir().split('/').slice(0, -2).join('/');
		if (self.currentDir().trim().length === 0) {
			return;
		}
		slots.getFiles({
			dir: dir + '/'
		}, function (files) {
			var fs = [];
			_.each(files, function (file) {
				fs.push(new File(file));
			});
			self.files(fs);
			self.currentDir(dir);
		});
	};
	
	self.clearSelection = function () {
		_.each(viewModel.files(), function (file) {
			file.selected(false);
		});
	};
}

function File(options) {
	var self = this;
	self.full = options.full;
	self.filename = options.filename;
	self.isDir = options.isDir;
	self.size = options.size;
	self.mtime = new Date(options.mtime);
	
	self.selected = ko.observable(false);
	
	self.getIcon = function () {
		return self.isDir ? '/files/images/dir.png' : '/files/images/file.png';
	};
	
	self.select = function (file, event) {
		event.stopPropagation();
		if (!event.ctrlKey) {
			_.each(viewModel.files(), function (file) {
				file.selected(false);
			});
		}
		if (event.ctrlKey) {
			self.selected(!self.selected());
		} else {
			self.selected(true);
		}
	},
	
	self.open = function () {
		if (!self.isDir) {
			var filename = viewModel.currentDir() + self.filename;
			if (filename.slice(0, 1) !== '/') {
				filename = '/' + filename;
			}
			$(document).trigger('openFile', { filename: filename });
			return;
		}
		slots.getFiles({
			dir: self.full + '/'
		}, function (files) {
			var fs = [];
			_.each(files, function (file) {
				fs.push(new File(file));
			});
			viewModel.files(fs);
			viewModel.currentDir(self.full + '/');
		});
	};
}

var viewModel = new ViewModel();

module.viewModel = viewModel;
module.File = File;