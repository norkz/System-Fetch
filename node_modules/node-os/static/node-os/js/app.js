$(function () {
	
	function ViewModel() {
		var self = this;
		
		self.tasks = ko.observableArray();
		self.currentTask = ko.observable();
		
		self.allTabs = ko.computed(function () {
			var tabs = [];
			_.each(self.tasks(), function (app) {
				tabs = tabs.concat(app.tabs());
			});
			return tabs;
		});
		
		self.icons = ko.observableArray();
		self.isStartActive = ko.observable(false);
		
		self.toggleStartActive = function () {
			self.isStartActive(!self.isStartActive());
		};
		
		self.addApp = function (app) {
			var task = false;
			_.each(self.tasks(), function (t) {
				if (t.name === app.name) {
					task = t;
				}
			});
			if (!task) {
				task = new Application({
					icon: app.icon,
					name: app.name,
					title: app.title
				});
				self.tasks.push(task);
			}
			$('head').append($('<style>' + app.css + '</style>'));
			var tab = new Tab({
				id: (new Date()).getTime(),
				title: task.title,
				content: app.html
			});
			task.tabs.push(tab);
			viewModel.currentTask(task);
			task.currentTab(tab);
		},
		
		self.openApp = function (appName, request) {
			os.socket.emit('app', appName, request, function (response) {
				self.addApp(response);
			});
		};
	}
	
	function Application(options) {
		var self = this;
		
		self.icon = options.icon;
		self.name = options.name;
		self.title = options.title;
		self.isActive = ko.computed(function () {
			return self.name === (viewModel.currentTask() || {}).name;
		});
		self.tabs = ko.observableArray();
		self.currentTab = ko.observable();
		
		self.activate = function () {
			viewModel.currentTask(self);
		};
	}
	
	function Tab(options) {
		var self = this;
		
		self.id = options.id;
		self.title = options.title;
		self.content = options.content
		
		self.isActive = ko.computed(function () {
			if (!viewModel.currentTask()) { return false; }
			return self.id === ((viewModel.currentTask().currentTab() || {}).id);
		});
		
		self.activate = function (tab, event) {
			if (event.which === 2) {
				event.preventDefault();
				viewModel.currentTask().tabs.remove(self);
				if (self.id === viewModel.currentTask().currentTab().id)
				viewModel.currentTask().currentTab(viewModel.currentTask().tabs()[0]);
				if (viewModel.currentTask().tabs().length === 0) {
					viewModel.tasks.remove(viewModel.currentTask());
					viewModel.currentTask(null);
				}
				return;
			}
			viewModel.currentTask().currentTab(self);
		};
	}
	
	function Icon(options) {
		var self = this;
		self.title = options.title;
		self.name = options.name;
		self.image = options.image;
		
		self.open = function () {
			viewModel.toggleStartActive();
			viewModel.openApp(self.name, {});
		};
	}
	
	var viewModel = new ViewModel();
	
	ko.applyBindings(viewModel, document.getElementById('app-block'));
	
	window.viewModel = viewModel;
	
	// $(document).keydown(function (event) {
	// 	if (event.which === 83 && event.ctrlKey) {
	// 		console.log('SAVE');
	// 		event.stopPropagation();
	// 		event.preventDefault();
	// 	}
	// });

	$(document).click(function () {
		viewModel.isStartActive(false);
	});
	$('.start-block').click(function (event) {
		event.stopPropagation();
	});
	$('.icons-block').click(function (event) {
		event.stopPropagation();
	});
	
	os.socket.emit('icons', function (icons) {
		_.each(icons, function (icon) {
			viewModel.icons.push(new Icon(icon));
		});
	});
	
	$(document).bind('openFile', function (event, data) {
		viewModel.openApp('text', {
			filename: data.filename
		});
	});
});
