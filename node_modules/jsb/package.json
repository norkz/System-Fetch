{
  "name": "jsb",
  "version": "0.0.1",
  "main": "./lib/index.js",
  "bin": {
    "jsb": "./cli/index.js"
  },
  "dependencies": {
    "underscore": "*",
    "jc": "*",
    "tap": "*",
    "uglifyjs": "*",
    "optimist": "*"
  },
  "readme": "# JSB\r\n\r\nПростой сборщик JavaScript-файлов.\r\n\r\n## Описание\r\n\r\nJSB предоставляет простой интерфейс для быстрой сборки и минификации JavaScript-файлов, включая следующие особенности:\r\n\r\n* Компиляция нескольких исходных файлов в один.\r\n* Сжатие исходного кода и удаление комментариев для уменьшения объема файла (с использованием UnglifyJS).\r\n* Инструкции `#import` и `#include`, которые позволяют импортировать файл как модуль и включать содержимое файла без изменений.\r\n\r\n## Установка\r\n\r\n    npm install jsb\r\n\r\n## Основной файл\r\n\r\nПри сборке необходимо указать JSB корневой файл, с которого начинается сборка. По умолчанию это файл `main.js` в текущей рабочей директории.\r\n\r\nДанный файл не является JSB-модулем, но допускает использование инструкций `#import` и `#include` для импорта модулей и включения файлов исходного кода.\r\n\r\n## CLI\r\n\r\nДля сборки из командной строки необходимо использовать команду `jsb`:\r\n\r\n    jsb\r\n\r\nДанная команда без аргументов попытается отыскать в текущей рабочей директории файл `main.js`, скомпилировать его и минифицировать, создав в текущей директории файл `index.js`, представляющий скомпилированный файл исходного кода.\r\n\r\nДля указания параметров сборки необходимо использовать следующие аргументы:\r\n\r\n* `-i`, `--input`: Указывает начальный файл. По умолчанию — `main.js`.\r\n* `-o`, `--output`: Указывает итоговый файл сборки. По умолчанию — `index.js`.\r\n* `-m`, `--min`: Указывает на необходимость минификации исходного кода и может иметь значения `true` или `false`. По умолчанию — `true`.\r\n* `-r`, `--root`: Указывает корневую директорию сборки, относительно которой будет выполняться поиск файлов, включаемых инструкциями `#include` и `#import`. По умолчанию — текущий рабочий каталог.\r\n\r\n### Файл build.json\r\n\r\nЕсли в директории сборки находится файл `build.json`, JSB попытается импортировать его и отыскать в нем пераметры сборки:\r\n\r\n    {\r\n        \"input\": \"main.js\",\r\n        \"output\": \"index.js\",\r\n        \"min\": true,\r\n        \"root\": \".\"\r\n    }\r\n\r\n## API\r\n\r\n    var jsb = require('jsb');\r\n    \r\n    // Производит сборку проекта\r\n    jsb.build({\r\n        input: 'main.js',\r\n        output: 'index.js',\r\n        min: true,\r\n        root: __dirname + '/static/js'\r\n    });\r\n    \r\n    // Возвращает скомпилированный код сборки\r\n    jsb.buildFile(filename, {\r\n        input: 'main.js',\r\n        output: 'index.js',\r\n        min: true,\r\n        root: __dirname + '/static/js'\r\n    });\r\n\r\n## JSB модуль\r\n\r\nJSB модуль представляет собой обычный JavaScript-файл с некоторыми особенностями:\r\n\r\n* Модуль имеет собственную область видимости, не засоряя глобальное пространство имен.\r\n* Внутри JSB-модуля доступны несколько инструкций и локальных переменных:\r\n    * Инструкция `#include` включает содержимое другого исходного файла в текущий модуль без изменений.\r\n    * Инструкция `#import` импортирует другой файл как JSB-модуль, в результате чего становится возможным присваивание результата данной инструкции локальной переменной.\r\n    * Переменная `module` ссылается на объект, представляющий текущий модуль. Для экспорта данных и функций можно присваивать свойства данному объекту.\r\n\r\n### Инструкция #include\r\n\r\nИнструкция #include позволяет включить произвольный файл исходного кода в текущий модуль:\r\n\r\n    #include('./lib/jquery.js');\r\n\r\nПри сборке данная инструкция заменяется содержимым указанного файла.\r\n\r\n### Инструкция #import\r\n\r\nИнструкция #import импортирует указанный файл исходного кода как JSB-модуль, который также может включать инструкции `#include` и `#import`:\r\n\r\n    var model = #import('./models/model.js');\r\n\r\nПри сборке содержимое указанного файла упаковывается в анонимную самовызывающуюся функцию и помещается на место инструкции `#import`. При выполнении кода в данную функцию передается один аргумент — переменная `module`, которая ссылается на пустой объект.\r\n\r\n### Переменная module\r\n\r\nПо умолчанию внутри JSB-модуля доступна одна локальная переменная `module`, которая ссылается на пустой объект текущего модуля. Для экспорта значения или метода необходимо присвоить соответствующее свойство объекту `module`.\r\n\r\nФайл `person.js`:\r\n\r\n    module.name = 'Tom Riddle';\r\n    module.age = '17';\r\n\r\nФайл `main.js`:\r\n    \r\n    var person = #import('./person.js');\r\n    \r\n    console.log(person.name); // Tom Riddle\r\n    console.log(person.age); // 17\r\n\r\n## Пути к файлам\r\n\r\nЕсли путь к файлу начинается с `//`, он рассматривается как относительный путь от корневой директории сборки. То есть, в инструкции `#include('//jquery.js')` будет включен файл `/build_directory/jquery.js`.\r\n\r\nЕсли путь к файлу начинается с `/`, он рассматривается как абсолютный путь от корня файловой системы.\r\n\r\nВ противном случае указанный путь к файлу рассматривается как относительный путь от директории, в которой расположен файл, содержащий инструкцию.",
  "readmeFilename": "README.md",
  "description": "Простой сборщик JavaScript-файлов.",
  "_id": "jsb@0.0.1",
  "_from": "jsb@*",
  "dist": {
    "shasum": "92972c3ebb857718769e6cd72c1babbf837133fa"
  },
  "_resolved": "https://registry.npmjs.org/jsb/-/jsb-0.0.1.tgz"
}
