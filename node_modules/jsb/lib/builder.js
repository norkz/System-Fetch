// External dependencies
var Class = require('jc');
var _ = require('underscore');
var fs = require('fs');
var path = require('path');
var uglifyjs = require('uglifyjs');

// Internal dependencies

// Shortcuts
var exists = fs.existsSync;
var readFile = fs.readFileSync;
var writeFile = fs.writeFileSync;

// Local vars
var moduleTemplate = readFile(__dirname + '/module.js.template') + '';

module.exports = Class({
    
    // Interface ===============================================================
    
    init: function (params) {
        var self = this;
        self.root = process.cwd();
        self.input = 'main.js';
        self.output = 'index.js';
        self.min = true;
        self.setParams(params);
        self.source = '';
    },
    
    build: function (params) {
        var self = this,
            source;
        self.loadParamsFromJSON();
        self.setParams(params);
        source = readFile(self.input) + '';
        source = self.replaceIncludes(source, self.input);
        source = self.replaceImports(source, self.input);
        self.source = source;
        self.minify();
        self.writeResult();
    },
    
    buildFile: function (filename, params) {
        var self = this,
            source;
        self.root = path.dirname(filename);  
        self.input = filename;  
        self.loadParamsFromJSON();
        self.setParams(params);
        source = readFile(self.input) + '';
        source = self.replaceIncludes(source, self.input);
        source = self.replaceImports(source, self.input);
        self.source = source;
        self.minify();
        return self.source;
    },
    
    // Implementation ==========================================================
    
    setParams: function (params) {
        var self = this;
        if (!params) { return; }
        self.root = params.root || self.root;
        self.input = params.input || self.input;
        self.output = params.output || self.output;
        self.min = params.min === undefined ? self.min : params.min;
        self.input = self.input.replace('//', self.root + '/');
        self.output = self.output.replace('//', self.root + '/');
    },
    
    loadParamsFromJSON: function () {
        var self = this,
            filename = self.root + '/build.json';
        if (!self.root) { return; }
        if (!exists(filename)) { return; }
        self.setParams(require(filename));
    },
    
    loadModuleFromFile: function (filename) {
        var self = this,
            source;
        if (!exists(filename)) { return null; }
        source = readFile(filename) + '';
        source = self.replaceIncludes(source, filename);
        source = self.replaceImports(source, filename);
        return moduleTemplate.replace('{{source}}', source);
    },
    
    replaceIncludes: function (source, filename) {
        var self = this;
        source = source.replace(/\#include\((.+?)\)/mg, function (text, find) {
            var includeFilename = self.resolveFilename(find.slice(1, -1), filename);
            return readFile(includeFilename) + '';
        });
        return source;
    },
    
    replaceImports: function (source, filename) {
        var self = this;
        source = source.replace(/\#import\((.+?)\)/mg, function (text, find) {
            var importFilename = self.resolveFilename(find.slice(1, -1), filename);
            return self.loadModuleFromFile(importFilename);
        });
        return source;
    },
    
    resolveFilename: function (filename, sourceFilename) {
        var self = this;
        if (filename.slice(0, 2) === '//') {
            filename = self.root + filename.slice(1);
            return filename;
        }
        if (filename.slice(0, 1) === '/') {
            return filename;
        }
        filename = path.dirname(sourceFilename) + '/' + filename;
        return filename;
    },
    
    minify: function () {
        var self = this;
        if (!self.min) { return; }
        self.source = uglifyjs.minify(self.source, { fromString: true }).code;
    },
    
    writeResult: function () {
        var self = this;
        writeFile(self.output, self.source);
    },
    
});